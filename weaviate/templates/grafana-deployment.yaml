apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-grafana-datasources
data:
  prometheus.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      url: http://{{ .Release.Name }}-prometheus:9090
      access: proxy
      isDefault: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-grafana-config
data:
  grafana.ini: |
    [auth.anonymous]
    enabled = true
    org_role = Viewer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-grafana
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        runAsUser: 472
        runAsGroup: 472
      containers:
      - name: grafana
        image: "{{ .Values.grafana.image.repository }}:{{ .Values.grafana.image.tag }}"
        imagePullPolicy: IfNotPresent
        resources:
          {{- toYaml .Values.grafana.resources | nindent 10 }}
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin"
        - name: GF_SECURITY_ADMIN_USER
          value: "admin"
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ORG_ROLE
          value: "Viewer"
        - name: GF_AUTH_BASIC_ENABLED
          value: "true"
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          timeoutSeconds: 5
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-grafana-pvc
      - name: grafana-config
        configMap:
          name: {{ .Release.Name }}-grafana-config
      - name: grafana-datasources
        configMap:
          name: {{ .Release.Name }}-grafana-datasources
      - name: grafana-dashboards-config
        configMap:
          name: {{ .Release.Name }}-grafana-dashboards
          items:
            - key: dashboard_provider.yml
              path: dashboards.yml
      - name: grafana-dashboards
        configMap:
          name: {{ .Release.Name }}-grafana-dashboards
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-grafana
spec:
  type: LoadBalancer
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: grafana
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-grafana-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.grafana.storage.size | default "10Gi" }} 